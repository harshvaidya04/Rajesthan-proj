name: Build, Push and Deploy to ECS

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  DOCKER_IMAGE_NAME: harshvaidya/rajesthan-marks-api
  AWS_REGION: ap-south-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker run --rm -d --name test-container -p 8000:8000 ${{ env.DOCKER_IMAGE_NAME }}:latest
        sleep 15
        curl -f http://localhost:8000/docs || exit 1
        docker stop test-container

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: List ECS resources in Mumbai region
      run: |
        echo "=== Checking ECS resources in ap-south-1 (Mumbai) ==="
        echo "=== ECS CLUSTERS ==="
        aws ecs list-clusters --region ap-south-1 --query 'clusterArns[*]' --output table
        
        echo "=== TASK DEFINITIONS ==="
        aws ecs list-task-definitions --region ap-south-1 --query 'taskDefinitionArns[*]' --output table
        
        echo "=== SERVICES (if any clusters exist) ==="
        CLUSTERS=$(aws ecs list-clusters --region ap-south-1 --query 'clusterArns[*]' --output text)
        for cluster in $CLUSTERS; do
          echo "Services in cluster: $cluster"
          aws ecs list-services --cluster $cluster --region ap-south-1 --query 'serviceArns[*]' --output table || echo "No services found"
        done

    - name: Find matching ECS resources
      id: find-resources
      run: |
        # Find cluster with similar name or get first cluster
        CLUSTER_ARN=$(aws ecs list-clusters --region ap-south-1 --query "clusterArns[?contains(@, 'rajesthan') || contains(@, 'marks') || contains(@, 'api')]" --output text | head -n1)
        if [ -z "$CLUSTER_ARN" ]; then
          CLUSTER_ARN=$(aws ecs list-clusters --region ap-south-1 --query 'clusterArns[0]' --output text)
        fi
        
        if [ "$CLUSTER_ARN" = "None" ] || [ -z "$CLUSTER_ARN" ]; then
          echo "No ECS clusters found in ap-south-1 region"
          exit 1
        fi
        
        CLUSTER_NAME=$(echo $CLUSTER_ARN | awk -F'/' '{print $NF}')
        echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        echo "Found cluster: $CLUSTER_NAME"
        
        # Find task definition with similar name
        TASK_DEF_ARN=$(aws ecs list-task-definitions --region ap-south-1 --query "taskDefinitionArns[?contains(@, 'rajesthan') || contains(@, 'marks') || contains(@, 'api')]" --output text | head -n1)
        if [ -z "$TASK_DEF_ARN" ]; then
          TASK_DEF_ARN=$(aws ecs list-task-definitions --region ap-south-1 --query 'taskDefinitionArns[-1]' --output text)
        fi
        
        if [ "$TASK_DEF_ARN" = "None" ] || [ -z "$TASK_DEF_ARN" ]; then
          echo "No task definitions found in ap-south-1 region"
          exit 1
        fi
        
        TASK_DEF_NAME=$(echo $TASK_DEF_ARN | awk -F'/' '{print $NF}' | awk -F':' '{print $1}')
        echo "task-def-name=$TASK_DEF_NAME" >> $GITHUB_OUTPUT
        echo "Found task definition: $TASK_DEF_NAME"
        
        # Find service with similar name
        SERVICE_ARN=$(aws ecs list-services --cluster $CLUSTER_NAME --region ap-south-1 --query "serviceArns[?contains(@, 'rajesthan') || contains(@, 'marks') || contains(@, 'api')]" --output text | head -n1)
        if [ -z "$SERVICE_ARN" ]; then
          SERVICE_ARN=$(aws ecs list-services --cluster $CLUSTER_NAME --region ap-south-1 --query 'serviceArns[0]' --output text)
        fi
        
        if [ "$SERVICE_ARN" = "None" ] || [ -z "$SERVICE_ARN" ]; then
          echo "No services found in cluster $CLUSTER_NAME"
          exit 1
        fi
        
        SERVICE_NAME=$(echo $SERVICE_ARN | awk -F'/' '{print $NF}')
        echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "Found service: $SERVICE_NAME"

    - name: Get task definition details
      run: |
        echo "=== TASK DEFINITION DETAILS ==="
        aws ecs describe-task-definition \
          --task-definition ${{ steps.find-resources.outputs.task-def-name }} \
          --region ap-south-1 \
          --query 'taskDefinition.containerDefinitions[*].{Name:name,Image:image,Port:portMappings[0].containerPort}' \
          --output table

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ steps.find-resources.outputs.task-def-name }} \
          --region ap-south-1 \
          --query taskDefinition > task-definition.json
        
        echo "Task definition downloaded:"
        cat task-definition.json | jq '.containerDefinitions[].name'

    - name: Find container name
      id: find-container
      run: |
        # Get the first container name from task definition
        CONTAINER_NAME=$(cat task-definition.json | jq -r '.containerDefinitions[0].name')
        echo "container-name=$CONTAINER_NAME" >> $GITHUB_OUTPUT
        echo "Found container name: $CONTAINER_NAME"
        
    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ steps.find-container.outputs.container-name }}
        image: ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ steps.find-resources.outputs.service-name }}
        cluster: ${{ steps.find-resources.outputs.cluster-name }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "=== DEPLOYMENT VERIFICATION ==="
        aws ecs describe-services \
          --cluster ${{ steps.find-resources.outputs.cluster-name }} \
          --services ${{ steps.find-resources.outputs.service-name }} \
          --region ap-south-1 \
          --query 'services[0].{ServiceName:serviceName,Status:status,TaskDefinition:taskDefinition,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output table
        
        echo "=== RUNNING TASKS ==="
        aws ecs list-tasks \
          --cluster ${{ steps.find-resources.outputs.cluster-name }} \
          --service-name ${{ steps.find-resources.outputs.service-name }} \
          --region ap-south-1 \
          --query 'taskArns[*]' \
          --output table
