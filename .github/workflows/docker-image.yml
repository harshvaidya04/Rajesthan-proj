name: Build, Push and Deploy to ECS

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  DOCKER_IMAGE_NAME: harshvaidya/rajesthan-marks-api
  AWS_REGION: ap-south-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker run --rm -d --name test-container -p 8000:8000 ${{ env.DOCKER_IMAGE_NAME }}:latest
        sleep 15
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Find ECS resources
      id: find-resources
      run: |
        # Find cluster
        CLUSTER_ARN=$(aws ecs list-clusters --region ap-south-1 --query 'clusterArns[0]' --output text)
        CLUSTER_NAME=$(echo $CLUSTER_ARN | awk -F'/' '{print $NF}')
        echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        echo "Found cluster: $CLUSTER_NAME"
        
        # Find task definition (get the latest)
        TASK_DEF_ARN=$(aws ecs list-task-definitions --region ap-south-1 --query 'taskDefinitionArns[-1]' --output text)
        TASK_DEF_NAME=$(echo $TASK_DEF_ARN | awk -F'/' '{print $NF}' | awk -F':' '{print $1}')
        echo "task-def-name=$TASK_DEF_NAME" >> $GITHUB_OUTPUT
        echo "Found task definition: $TASK_DEF_NAME"
        
        # Find service
        SERVICE_ARN=$(aws ecs list-services --cluster $CLUSTER_NAME --region ap-south-1 --query 'serviceArns[0]' --output text)
        SERVICE_NAME=$(echo $SERVICE_ARN | awk -F'/' '{print $NF}')
        echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "Found service: $SERVICE_NAME"

    - name: Download and clean task definition
      run: |
        # Download task definition
        aws ecs describe-task-definition \
          --task-definition ${{ steps.find-resources.outputs.task-def-name }} \
          --region ap-south-1 \
          --query taskDefinition > original-task-definition.json
        
        # Clean task definition by removing unsupported fields and update port mapping
        cat original-task-definition.json | jq '
          del(.taskDefinitionArn) |
          del(.revision) |
          del(.status) |
          del(.requiresAttributes) |
          del(.placementConstraints) |
          del(.compatibilities) |
          del(.registeredAt) |
          del(.registeredBy) |
          del(.enableFaultInjection) |
          del(.containerDefinitions[].enableFaultInjection) |
          del(.containerDefinitions[]?.repositoryCredentials) |
          # Update port mappings to use 8000
          .containerDefinitions = [
            .containerDefinitions[] |
            if .portMappings then
              .portMappings = [.portMappings[] | .containerPort = 8000]
            else . end
          ] |
          # Remove any other problematic fields
          walk(if type == "object" then del(.enableFaultInjection) else . end)
        ' > task-definition.json
        
        echo "Cleaned task definition with updated ports:"
        cat task-definition.json | jq '.containerDefinitions[] | {name: .name, ports: .portMappings}'

    - name: Update image in task definition
      run: |
        # Update the image for the rajesthan-marks container
        cat task-definition.json | jq --arg IMAGE "${{ env.DOCKER_IMAGE_NAME }}:latest" '
          .containerDefinitions = [
            .containerDefinitions[] | 
            if .name == "rajesthan-marks" then 
              .image = $IMAGE 
            else . 
            end
          ]
        ' > updated-task-definition.json
        
        echo "Updated task definition with new image and port 8000:"
        cat updated-task-definition.json | jq '.containerDefinitions[] | {name: .name, image: .image, ports: .portMappings}'

    - name: Register new task definition
      id: register-task-def
      run: |
        # Register the updated task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --region ap-south-1 \
          --cli-input-json file://updated-task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
        echo "Registered new task definition: $NEW_TASK_DEF_ARN"

    - name: Update ECS service
      run: |
        # Update the service with the new task definition
        aws ecs update-service \
          --region ap-south-1 \
          --cluster ${{ steps.find-resources.outputs.cluster-name }} \
          --service ${{ steps.find-resources.outputs.service-name }} \
          --task-definition ${{ steps.register-task-def.outputs.task-def-arn }} \
          --force-new-deployment
        
        echo "Service update initiated with port 8000"

    - name: Wait for deployment stability
      run: |
        echo "Waiting for service to reach stable state..."
        aws ecs wait services-stable \
          --region ap-south-1 \
          --cluster ${{ steps.find-resources.outputs.cluster-name }} \
          --services ${{ steps.find-resources.outputs.service-name }}
        
        echo "Service deployment completed!"

    - name: Verify deployment
      run: |
        echo "=== DEPLOYMENT VERIFICATION ==="
        aws ecs describe-services \
          --cluster ${{ steps.find-resources.outputs.cluster-name }} \
          --services ${{ steps.find-resources.outputs.service-name }} \
          --region ap-south-1 \
          --query 'services[0].{ServiceName:serviceName,Status:status,TaskDefinition:taskDefinition,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output table
        
        echo "=== RUNNING TASKS ==="
        TASKS=$(aws ecs list-tasks \
          --cluster ${{ steps.find-resources.outputs.cluster-name }} \
          --service-name ${{ steps.find-resources.outputs.service-name }} \
          --region ap-south-1 \
          --query 'taskArns[*]' \
          --output text)
        
        if [ ! -z "$TASKS" ]; then
          aws ecs describe-tasks \
            --cluster ${{ steps.find-resources.outputs.cluster-name }} \
            --region ap-south-1 \
            --tasks $TASKS \
            --query 'tasks[*].{TaskArn:taskArn,LastStatus:lastStatus,HealthStatus:healthStatus}' \
            --output table
        fi
        
        echo "=== PORT VERIFICATION ==="
        echo "Checking if containers are running on port 8000..."
        aws ecs describe-task-definition \
          --task-definition ${{ steps.register-task-def.outputs.task-def-arn }} \
          --region ap-south-1 \
          --query 'taskDefinition.containerDefinitions[*].portMappings[*].containerPort' \
          --output table
        
        echo "=== DEPLOYMENT SUMMARY ==="
        echo "✅ Docker image built and pushed to Docker Hub"
        echo "✅ New ECS task definition registered: ${{ steps.register-task-def.outputs.task-def-arn }}"
        echo "✅ ECS service updated with new task definition"
        echo "✅ Deployment completed successfully!"
